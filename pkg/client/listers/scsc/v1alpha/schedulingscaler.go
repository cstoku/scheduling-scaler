/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha

import (
	v1alpha "github.com/cstoku/scheduling-scaler/pkg/apis/scsc/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SchedulingScalerLister helps list SchedulingScalers.
type SchedulingScalerLister interface {
	// List lists all SchedulingScalers in the indexer.
	List(selector labels.Selector) (ret []*v1alpha.SchedulingScaler, err error)
	// SchedulingScalers returns an object that can list and get SchedulingScalers.
	SchedulingScalers(namespace string) SchedulingScalerNamespaceLister
	SchedulingScalerListerExpansion
}

// schedulingScalerLister implements the SchedulingScalerLister interface.
type schedulingScalerLister struct {
	indexer cache.Indexer
}

// NewSchedulingScalerLister returns a new SchedulingScalerLister.
func NewSchedulingScalerLister(indexer cache.Indexer) SchedulingScalerLister {
	return &schedulingScalerLister{indexer: indexer}
}

// List lists all SchedulingScalers in the indexer.
func (s *schedulingScalerLister) List(selector labels.Selector) (ret []*v1alpha.SchedulingScaler, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha.SchedulingScaler))
	})
	return ret, err
}

// SchedulingScalers returns an object that can list and get SchedulingScalers.
func (s *schedulingScalerLister) SchedulingScalers(namespace string) SchedulingScalerNamespaceLister {
	return schedulingScalerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SchedulingScalerNamespaceLister helps list and get SchedulingScalers.
type SchedulingScalerNamespaceLister interface {
	// List lists all SchedulingScalers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha.SchedulingScaler, err error)
	// Get retrieves the SchedulingScaler from the indexer for a given namespace and name.
	Get(name string) (*v1alpha.SchedulingScaler, error)
	SchedulingScalerNamespaceListerExpansion
}

// schedulingScalerNamespaceLister implements the SchedulingScalerNamespaceLister
// interface.
type schedulingScalerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SchedulingScalers in the indexer for a given namespace.
func (s schedulingScalerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha.SchedulingScaler, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha.SchedulingScaler))
	})
	return ret, err
}

// Get retrieves the SchedulingScaler from the indexer for a given namespace and name.
func (s schedulingScalerNamespaceLister) Get(name string) (*v1alpha.SchedulingScaler, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha.Resource("schedulingscaler"), name)
	}
	return obj.(*v1alpha.SchedulingScaler), nil
}
